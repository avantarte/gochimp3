// Code generated by counterfeiter. DO NOT EDIT.
package gochimp3fakes

import (
	"context"
	"sync"

	"github.com/avantarte/gochimp3"
)

type FakeMailchimp struct {
	CreateBatchOperationStub        func(context.Context, *gochimp3.BatchOperationCreationRequest) (*gochimp3.BatchOperationResponse, error)
	createBatchOperationMutex       sync.RWMutex
	createBatchOperationArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.BatchOperationCreationRequest
	}
	createBatchOperationReturns struct {
		result1 *gochimp3.BatchOperationResponse
		result2 error
	}
	createBatchOperationReturnsOnCall map[int]struct {
		result1 *gochimp3.BatchOperationResponse
		result2 error
	}
	CreateCampaignStub        func(context.Context, *gochimp3.CampaignCreationRequest) (*gochimp3.CampaignResponse, error)
	createCampaignMutex       sync.RWMutex
	createCampaignArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.CampaignCreationRequest
	}
	createCampaignReturns struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}
	createCampaignReturnsOnCall map[int]struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}
	CreateCampaignFolderStub        func(context.Context, *gochimp3.CampaignFolderCreationRequest) (*gochimp3.CampaignFolder, error)
	createCampaignFolderMutex       sync.RWMutex
	createCampaignFolderArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.CampaignFolderCreationRequest
	}
	createCampaignFolderReturns struct {
		result1 *gochimp3.CampaignFolder
		result2 error
	}
	createCampaignFolderReturnsOnCall map[int]struct {
		result1 *gochimp3.CampaignFolder
		result2 error
	}
	CreateListStub        func(context.Context, *gochimp3.ListCreationRequest) (*gochimp3.ListResponse, error)
	createListMutex       sync.RWMutex
	createListArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.ListCreationRequest
	}
	createListReturns struct {
		result1 *gochimp3.ListResponse
		result2 error
	}
	createListReturnsOnCall map[int]struct {
		result1 *gochimp3.ListResponse
		result2 error
	}
	CreateTemplateStub        func(context.Context, *gochimp3.TemplateCreationRequest) (*gochimp3.TemplateResponse, error)
	createTemplateMutex       sync.RWMutex
	createTemplateArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.TemplateCreationRequest
	}
	createTemplateReturns struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}
	createTemplateReturnsOnCall map[int]struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}
	CreateTemplateFolderStub        func(context.Context, *gochimp3.TemplateFolderCreationRequest) (*gochimp3.TemplateFolder, error)
	createTemplateFolderMutex       sync.RWMutex
	createTemplateFolderArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.TemplateFolderCreationRequest
	}
	createTemplateFolderReturns struct {
		result1 *gochimp3.TemplateFolder
		result2 error
	}
	createTemplateFolderReturnsOnCall map[int]struct {
		result1 *gochimp3.TemplateFolder
		result2 error
	}
	DeleteCampaignStub        func(context.Context, string) (bool, error)
	deleteCampaignMutex       sync.RWMutex
	deleteCampaignArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteCampaignReturns struct {
		result1 bool
		result2 error
	}
	deleteCampaignReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	DeleteListStub        func(context.Context, string) (bool, error)
	deleteListMutex       sync.RWMutex
	deleteListArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteListReturns struct {
		result1 bool
		result2 error
	}
	deleteListReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	DeleteTemplateStub        func(context.Context, string) (bool, error)
	deleteTemplateMutex       sync.RWMutex
	deleteTemplateArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteTemplateReturns struct {
		result1 bool
		result2 error
	}
	deleteTemplateReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetBatchOperationStub        func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.BatchOperationResponse, error)
	getBatchOperationMutex       sync.RWMutex
	getBatchOperationArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}
	getBatchOperationReturns struct {
		result1 *gochimp3.BatchOperationResponse
		result2 error
	}
	getBatchOperationReturnsOnCall map[int]struct {
		result1 *gochimp3.BatchOperationResponse
		result2 error
	}
	GetBatchOperationsStub        func(context.Context, *gochimp3.ListQueryParams) (*gochimp3.ListOfBatchOperations, error)
	getBatchOperationsMutex       sync.RWMutex
	getBatchOperationsArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.ListQueryParams
	}
	getBatchOperationsReturns struct {
		result1 *gochimp3.ListOfBatchOperations
		result2 error
	}
	getBatchOperationsReturnsOnCall map[int]struct {
		result1 *gochimp3.ListOfBatchOperations
		result2 error
	}
	GetCampaignStub        func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.CampaignResponse, error)
	getCampaignMutex       sync.RWMutex
	getCampaignArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}
	getCampaignReturns struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}
	getCampaignReturnsOnCall map[int]struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}
	GetCampaignContentStub        func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.CampaignContentResponse, error)
	getCampaignContentMutex       sync.RWMutex
	getCampaignContentArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}
	getCampaignContentReturns struct {
		result1 *gochimp3.CampaignContentResponse
		result2 error
	}
	getCampaignContentReturnsOnCall map[int]struct {
		result1 *gochimp3.CampaignContentResponse
		result2 error
	}
	GetCampaignFoldersStub        func(context.Context, *gochimp3.CampaignFolderQueryParams) (*gochimp3.ListOfCampaignFolders, error)
	getCampaignFoldersMutex       sync.RWMutex
	getCampaignFoldersArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.CampaignFolderQueryParams
	}
	getCampaignFoldersReturns struct {
		result1 *gochimp3.ListOfCampaignFolders
		result2 error
	}
	getCampaignFoldersReturnsOnCall map[int]struct {
		result1 *gochimp3.ListOfCampaignFolders
		result2 error
	}
	GetCampaignsStub        func(context.Context, *gochimp3.CampaignQueryParams) (*gochimp3.ListOfCampaigns, error)
	getCampaignsMutex       sync.RWMutex
	getCampaignsArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.CampaignQueryParams
	}
	getCampaignsReturns struct {
		result1 *gochimp3.ListOfCampaigns
		result2 error
	}
	getCampaignsReturnsOnCall map[int]struct {
		result1 *gochimp3.ListOfCampaigns
		result2 error
	}
	GetListStub        func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.ListResponse, error)
	getListMutex       sync.RWMutex
	getListArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}
	getListReturns struct {
		result1 *gochimp3.ListResponse
		result2 error
	}
	getListReturnsOnCall map[int]struct {
		result1 *gochimp3.ListResponse
		result2 error
	}
	GetListsStub        func(context.Context, *gochimp3.ListQueryParams) (*gochimp3.ListOfLists, error)
	getListsMutex       sync.RWMutex
	getListsArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.ListQueryParams
	}
	getListsReturns struct {
		result1 *gochimp3.ListOfLists
		result2 error
	}
	getListsReturnsOnCall map[int]struct {
		result1 *gochimp3.ListOfLists
		result2 error
	}
	GetRootStub        func(context.Context, *gochimp3.BasicQueryParams) (*gochimp3.RootResponse, error)
	getRootMutex       sync.RWMutex
	getRootArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.BasicQueryParams
	}
	getRootReturns struct {
		result1 *gochimp3.RootResponse
		result2 error
	}
	getRootReturnsOnCall map[int]struct {
		result1 *gochimp3.RootResponse
		result2 error
	}
	GetTemplateStub        func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.TemplateResponse, error)
	getTemplateMutex       sync.RWMutex
	getTemplateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}
	getTemplateReturns struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}
	getTemplateReturnsOnCall map[int]struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}
	GetTemplateDefaultContentStub        func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.TemplateDefaultContentResponse, error)
	getTemplateDefaultContentMutex       sync.RWMutex
	getTemplateDefaultContentArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}
	getTemplateDefaultContentReturns struct {
		result1 *gochimp3.TemplateDefaultContentResponse
		result2 error
	}
	getTemplateDefaultContentReturnsOnCall map[int]struct {
		result1 *gochimp3.TemplateDefaultContentResponse
		result2 error
	}
	GetTemplateFoldersStub        func(context.Context, *gochimp3.TemplateFolderQueryParams) (*gochimp3.ListOfTemplateFolders, error)
	getTemplateFoldersMutex       sync.RWMutex
	getTemplateFoldersArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.TemplateFolderQueryParams
	}
	getTemplateFoldersReturns struct {
		result1 *gochimp3.ListOfTemplateFolders
		result2 error
	}
	getTemplateFoldersReturnsOnCall map[int]struct {
		result1 *gochimp3.ListOfTemplateFolders
		result2 error
	}
	GetTemplatesStub        func(context.Context, *gochimp3.TemplateQueryParams) (*gochimp3.ListOfTemplates, error)
	getTemplatesMutex       sync.RWMutex
	getTemplatesArgsForCall []struct {
		arg1 context.Context
		arg2 *gochimp3.TemplateQueryParams
	}
	getTemplatesReturns struct {
		result1 *gochimp3.ListOfTemplates
		result2 error
	}
	getTemplatesReturnsOnCall map[int]struct {
		result1 *gochimp3.ListOfTemplates
		result2 error
	}
	MemberForApiCallsStub        func(string, string) *gochimp3.Member
	memberForApiCallsMutex       sync.RWMutex
	memberForApiCallsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	memberForApiCallsReturns struct {
		result1 *gochimp3.Member
	}
	memberForApiCallsReturnsOnCall map[int]struct {
		result1 *gochimp3.Member
	}
	NewListResponseStub        func(string) *gochimp3.ListResponse
	newListResponseMutex       sync.RWMutex
	newListResponseArgsForCall []struct {
		arg1 string
	}
	newListResponseReturns struct {
		result1 *gochimp3.ListResponse
	}
	newListResponseReturnsOnCall map[int]struct {
		result1 *gochimp3.ListResponse
	}
	SendCampaignStub        func(context.Context, string, *gochimp3.SendCampaignRequest) (bool, error)
	sendCampaignMutex       sync.RWMutex
	sendCampaignArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.SendCampaignRequest
	}
	sendCampaignReturns struct {
		result1 bool
		result2 error
	}
	sendCampaignReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	SendTestEmailStub        func(context.Context, string, *gochimp3.TestEmailRequest) (bool, error)
	sendTestEmailMutex       sync.RWMutex
	sendTestEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.TestEmailRequest
	}
	sendTestEmailReturns struct {
		result1 bool
		result2 error
	}
	sendTestEmailReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	UpdateCampaignStub        func(context.Context, string, *gochimp3.CampaignCreationRequest) (*gochimp3.CampaignResponse, error)
	updateCampaignMutex       sync.RWMutex
	updateCampaignArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.CampaignCreationRequest
	}
	updateCampaignReturns struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}
	updateCampaignReturnsOnCall map[int]struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}
	UpdateCampaignContentStub        func(context.Context, string, *gochimp3.CampaignContentUpdateRequest) (*gochimp3.CampaignContentResponse, error)
	updateCampaignContentMutex       sync.RWMutex
	updateCampaignContentArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.CampaignContentUpdateRequest
	}
	updateCampaignContentReturns struct {
		result1 *gochimp3.CampaignContentResponse
		result2 error
	}
	updateCampaignContentReturnsOnCall map[int]struct {
		result1 *gochimp3.CampaignContentResponse
		result2 error
	}
	UpdateListStub        func(context.Context, string, *gochimp3.ListCreationRequest) (*gochimp3.ListResponse, error)
	updateListMutex       sync.RWMutex
	updateListArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.ListCreationRequest
	}
	updateListReturns struct {
		result1 *gochimp3.ListResponse
		result2 error
	}
	updateListReturnsOnCall map[int]struct {
		result1 *gochimp3.ListResponse
		result2 error
	}
	UpdateTemplateStub        func(context.Context, string, *gochimp3.TemplateCreationRequest) (*gochimp3.TemplateResponse, error)
	updateTemplateMutex       sync.RWMutex
	updateTemplateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.TemplateCreationRequest
	}
	updateTemplateReturns struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}
	updateTemplateReturnsOnCall map[int]struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}
	requestStub        func(context.Context, string, string, gochimp3.QueryParams, interface{}, interface{}) error
	requestMutex       sync.RWMutex
	requestArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 gochimp3.QueryParams
		arg5 interface{}
		arg6 interface{}
	}
	requestReturns struct {
		result1 error
	}
	requestReturnsOnCall map[int]struct {
		result1 error
	}
	requestOkStub        func(context.Context, string, string) (bool, error)
	requestOkMutex       sync.RWMutex
	requestOkArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	requestOkReturns struct {
		result1 bool
		result2 error
	}
	requestOkReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMailchimp) CreateBatchOperation(arg1 context.Context, arg2 *gochimp3.BatchOperationCreationRequest) (*gochimp3.BatchOperationResponse, error) {
	fake.createBatchOperationMutex.Lock()
	ret, specificReturn := fake.createBatchOperationReturnsOnCall[len(fake.createBatchOperationArgsForCall)]
	fake.createBatchOperationArgsForCall = append(fake.createBatchOperationArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.BatchOperationCreationRequest
	}{arg1, arg2})
	stub := fake.CreateBatchOperationStub
	fakeReturns := fake.createBatchOperationReturns
	fake.recordInvocation("CreateBatchOperation", []interface{}{arg1, arg2})
	fake.createBatchOperationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) CreateBatchOperationCallCount() int {
	fake.createBatchOperationMutex.RLock()
	defer fake.createBatchOperationMutex.RUnlock()
	return len(fake.createBatchOperationArgsForCall)
}

func (fake *FakeMailchimp) CreateBatchOperationCalls(stub func(context.Context, *gochimp3.BatchOperationCreationRequest) (*gochimp3.BatchOperationResponse, error)) {
	fake.createBatchOperationMutex.Lock()
	defer fake.createBatchOperationMutex.Unlock()
	fake.CreateBatchOperationStub = stub
}

func (fake *FakeMailchimp) CreateBatchOperationArgsForCall(i int) (context.Context, *gochimp3.BatchOperationCreationRequest) {
	fake.createBatchOperationMutex.RLock()
	defer fake.createBatchOperationMutex.RUnlock()
	argsForCall := fake.createBatchOperationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) CreateBatchOperationReturns(result1 *gochimp3.BatchOperationResponse, result2 error) {
	fake.createBatchOperationMutex.Lock()
	defer fake.createBatchOperationMutex.Unlock()
	fake.CreateBatchOperationStub = nil
	fake.createBatchOperationReturns = struct {
		result1 *gochimp3.BatchOperationResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateBatchOperationReturnsOnCall(i int, result1 *gochimp3.BatchOperationResponse, result2 error) {
	fake.createBatchOperationMutex.Lock()
	defer fake.createBatchOperationMutex.Unlock()
	fake.CreateBatchOperationStub = nil
	if fake.createBatchOperationReturnsOnCall == nil {
		fake.createBatchOperationReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.BatchOperationResponse
			result2 error
		})
	}
	fake.createBatchOperationReturnsOnCall[i] = struct {
		result1 *gochimp3.BatchOperationResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateCampaign(arg1 context.Context, arg2 *gochimp3.CampaignCreationRequest) (*gochimp3.CampaignResponse, error) {
	fake.createCampaignMutex.Lock()
	ret, specificReturn := fake.createCampaignReturnsOnCall[len(fake.createCampaignArgsForCall)]
	fake.createCampaignArgsForCall = append(fake.createCampaignArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.CampaignCreationRequest
	}{arg1, arg2})
	stub := fake.CreateCampaignStub
	fakeReturns := fake.createCampaignReturns
	fake.recordInvocation("CreateCampaign", []interface{}{arg1, arg2})
	fake.createCampaignMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) CreateCampaignCallCount() int {
	fake.createCampaignMutex.RLock()
	defer fake.createCampaignMutex.RUnlock()
	return len(fake.createCampaignArgsForCall)
}

func (fake *FakeMailchimp) CreateCampaignCalls(stub func(context.Context, *gochimp3.CampaignCreationRequest) (*gochimp3.CampaignResponse, error)) {
	fake.createCampaignMutex.Lock()
	defer fake.createCampaignMutex.Unlock()
	fake.CreateCampaignStub = stub
}

func (fake *FakeMailchimp) CreateCampaignArgsForCall(i int) (context.Context, *gochimp3.CampaignCreationRequest) {
	fake.createCampaignMutex.RLock()
	defer fake.createCampaignMutex.RUnlock()
	argsForCall := fake.createCampaignArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) CreateCampaignReturns(result1 *gochimp3.CampaignResponse, result2 error) {
	fake.createCampaignMutex.Lock()
	defer fake.createCampaignMutex.Unlock()
	fake.CreateCampaignStub = nil
	fake.createCampaignReturns = struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateCampaignReturnsOnCall(i int, result1 *gochimp3.CampaignResponse, result2 error) {
	fake.createCampaignMutex.Lock()
	defer fake.createCampaignMutex.Unlock()
	fake.CreateCampaignStub = nil
	if fake.createCampaignReturnsOnCall == nil {
		fake.createCampaignReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.CampaignResponse
			result2 error
		})
	}
	fake.createCampaignReturnsOnCall[i] = struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateCampaignFolder(arg1 context.Context, arg2 *gochimp3.CampaignFolderCreationRequest) (*gochimp3.CampaignFolder, error) {
	fake.createCampaignFolderMutex.Lock()
	ret, specificReturn := fake.createCampaignFolderReturnsOnCall[len(fake.createCampaignFolderArgsForCall)]
	fake.createCampaignFolderArgsForCall = append(fake.createCampaignFolderArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.CampaignFolderCreationRequest
	}{arg1, arg2})
	stub := fake.CreateCampaignFolderStub
	fakeReturns := fake.createCampaignFolderReturns
	fake.recordInvocation("CreateCampaignFolder", []interface{}{arg1, arg2})
	fake.createCampaignFolderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) CreateCampaignFolderCallCount() int {
	fake.createCampaignFolderMutex.RLock()
	defer fake.createCampaignFolderMutex.RUnlock()
	return len(fake.createCampaignFolderArgsForCall)
}

func (fake *FakeMailchimp) CreateCampaignFolderCalls(stub func(context.Context, *gochimp3.CampaignFolderCreationRequest) (*gochimp3.CampaignFolder, error)) {
	fake.createCampaignFolderMutex.Lock()
	defer fake.createCampaignFolderMutex.Unlock()
	fake.CreateCampaignFolderStub = stub
}

func (fake *FakeMailchimp) CreateCampaignFolderArgsForCall(i int) (context.Context, *gochimp3.CampaignFolderCreationRequest) {
	fake.createCampaignFolderMutex.RLock()
	defer fake.createCampaignFolderMutex.RUnlock()
	argsForCall := fake.createCampaignFolderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) CreateCampaignFolderReturns(result1 *gochimp3.CampaignFolder, result2 error) {
	fake.createCampaignFolderMutex.Lock()
	defer fake.createCampaignFolderMutex.Unlock()
	fake.CreateCampaignFolderStub = nil
	fake.createCampaignFolderReturns = struct {
		result1 *gochimp3.CampaignFolder
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateCampaignFolderReturnsOnCall(i int, result1 *gochimp3.CampaignFolder, result2 error) {
	fake.createCampaignFolderMutex.Lock()
	defer fake.createCampaignFolderMutex.Unlock()
	fake.CreateCampaignFolderStub = nil
	if fake.createCampaignFolderReturnsOnCall == nil {
		fake.createCampaignFolderReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.CampaignFolder
			result2 error
		})
	}
	fake.createCampaignFolderReturnsOnCall[i] = struct {
		result1 *gochimp3.CampaignFolder
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateList(arg1 context.Context, arg2 *gochimp3.ListCreationRequest) (*gochimp3.ListResponse, error) {
	fake.createListMutex.Lock()
	ret, specificReturn := fake.createListReturnsOnCall[len(fake.createListArgsForCall)]
	fake.createListArgsForCall = append(fake.createListArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.ListCreationRequest
	}{arg1, arg2})
	stub := fake.CreateListStub
	fakeReturns := fake.createListReturns
	fake.recordInvocation("CreateList", []interface{}{arg1, arg2})
	fake.createListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) CreateListCallCount() int {
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	return len(fake.createListArgsForCall)
}

func (fake *FakeMailchimp) CreateListCalls(stub func(context.Context, *gochimp3.ListCreationRequest) (*gochimp3.ListResponse, error)) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = stub
}

func (fake *FakeMailchimp) CreateListArgsForCall(i int) (context.Context, *gochimp3.ListCreationRequest) {
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	argsForCall := fake.createListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) CreateListReturns(result1 *gochimp3.ListResponse, result2 error) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = nil
	fake.createListReturns = struct {
		result1 *gochimp3.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateListReturnsOnCall(i int, result1 *gochimp3.ListResponse, result2 error) {
	fake.createListMutex.Lock()
	defer fake.createListMutex.Unlock()
	fake.CreateListStub = nil
	if fake.createListReturnsOnCall == nil {
		fake.createListReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListResponse
			result2 error
		})
	}
	fake.createListReturnsOnCall[i] = struct {
		result1 *gochimp3.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateTemplate(arg1 context.Context, arg2 *gochimp3.TemplateCreationRequest) (*gochimp3.TemplateResponse, error) {
	fake.createTemplateMutex.Lock()
	ret, specificReturn := fake.createTemplateReturnsOnCall[len(fake.createTemplateArgsForCall)]
	fake.createTemplateArgsForCall = append(fake.createTemplateArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.TemplateCreationRequest
	}{arg1, arg2})
	stub := fake.CreateTemplateStub
	fakeReturns := fake.createTemplateReturns
	fake.recordInvocation("CreateTemplate", []interface{}{arg1, arg2})
	fake.createTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) CreateTemplateCallCount() int {
	fake.createTemplateMutex.RLock()
	defer fake.createTemplateMutex.RUnlock()
	return len(fake.createTemplateArgsForCall)
}

func (fake *FakeMailchimp) CreateTemplateCalls(stub func(context.Context, *gochimp3.TemplateCreationRequest) (*gochimp3.TemplateResponse, error)) {
	fake.createTemplateMutex.Lock()
	defer fake.createTemplateMutex.Unlock()
	fake.CreateTemplateStub = stub
}

func (fake *FakeMailchimp) CreateTemplateArgsForCall(i int) (context.Context, *gochimp3.TemplateCreationRequest) {
	fake.createTemplateMutex.RLock()
	defer fake.createTemplateMutex.RUnlock()
	argsForCall := fake.createTemplateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) CreateTemplateReturns(result1 *gochimp3.TemplateResponse, result2 error) {
	fake.createTemplateMutex.Lock()
	defer fake.createTemplateMutex.Unlock()
	fake.CreateTemplateStub = nil
	fake.createTemplateReturns = struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateTemplateReturnsOnCall(i int, result1 *gochimp3.TemplateResponse, result2 error) {
	fake.createTemplateMutex.Lock()
	defer fake.createTemplateMutex.Unlock()
	fake.CreateTemplateStub = nil
	if fake.createTemplateReturnsOnCall == nil {
		fake.createTemplateReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.TemplateResponse
			result2 error
		})
	}
	fake.createTemplateReturnsOnCall[i] = struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateTemplateFolder(arg1 context.Context, arg2 *gochimp3.TemplateFolderCreationRequest) (*gochimp3.TemplateFolder, error) {
	fake.createTemplateFolderMutex.Lock()
	ret, specificReturn := fake.createTemplateFolderReturnsOnCall[len(fake.createTemplateFolderArgsForCall)]
	fake.createTemplateFolderArgsForCall = append(fake.createTemplateFolderArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.TemplateFolderCreationRequest
	}{arg1, arg2})
	stub := fake.CreateTemplateFolderStub
	fakeReturns := fake.createTemplateFolderReturns
	fake.recordInvocation("CreateTemplateFolder", []interface{}{arg1, arg2})
	fake.createTemplateFolderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) CreateTemplateFolderCallCount() int {
	fake.createTemplateFolderMutex.RLock()
	defer fake.createTemplateFolderMutex.RUnlock()
	return len(fake.createTemplateFolderArgsForCall)
}

func (fake *FakeMailchimp) CreateTemplateFolderCalls(stub func(context.Context, *gochimp3.TemplateFolderCreationRequest) (*gochimp3.TemplateFolder, error)) {
	fake.createTemplateFolderMutex.Lock()
	defer fake.createTemplateFolderMutex.Unlock()
	fake.CreateTemplateFolderStub = stub
}

func (fake *FakeMailchimp) CreateTemplateFolderArgsForCall(i int) (context.Context, *gochimp3.TemplateFolderCreationRequest) {
	fake.createTemplateFolderMutex.RLock()
	defer fake.createTemplateFolderMutex.RUnlock()
	argsForCall := fake.createTemplateFolderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) CreateTemplateFolderReturns(result1 *gochimp3.TemplateFolder, result2 error) {
	fake.createTemplateFolderMutex.Lock()
	defer fake.createTemplateFolderMutex.Unlock()
	fake.CreateTemplateFolderStub = nil
	fake.createTemplateFolderReturns = struct {
		result1 *gochimp3.TemplateFolder
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) CreateTemplateFolderReturnsOnCall(i int, result1 *gochimp3.TemplateFolder, result2 error) {
	fake.createTemplateFolderMutex.Lock()
	defer fake.createTemplateFolderMutex.Unlock()
	fake.CreateTemplateFolderStub = nil
	if fake.createTemplateFolderReturnsOnCall == nil {
		fake.createTemplateFolderReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.TemplateFolder
			result2 error
		})
	}
	fake.createTemplateFolderReturnsOnCall[i] = struct {
		result1 *gochimp3.TemplateFolder
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) DeleteCampaign(arg1 context.Context, arg2 string) (bool, error) {
	fake.deleteCampaignMutex.Lock()
	ret, specificReturn := fake.deleteCampaignReturnsOnCall[len(fake.deleteCampaignArgsForCall)]
	fake.deleteCampaignArgsForCall = append(fake.deleteCampaignArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteCampaignStub
	fakeReturns := fake.deleteCampaignReturns
	fake.recordInvocation("DeleteCampaign", []interface{}{arg1, arg2})
	fake.deleteCampaignMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) DeleteCampaignCallCount() int {
	fake.deleteCampaignMutex.RLock()
	defer fake.deleteCampaignMutex.RUnlock()
	return len(fake.deleteCampaignArgsForCall)
}

func (fake *FakeMailchimp) DeleteCampaignCalls(stub func(context.Context, string) (bool, error)) {
	fake.deleteCampaignMutex.Lock()
	defer fake.deleteCampaignMutex.Unlock()
	fake.DeleteCampaignStub = stub
}

func (fake *FakeMailchimp) DeleteCampaignArgsForCall(i int) (context.Context, string) {
	fake.deleteCampaignMutex.RLock()
	defer fake.deleteCampaignMutex.RUnlock()
	argsForCall := fake.deleteCampaignArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) DeleteCampaignReturns(result1 bool, result2 error) {
	fake.deleteCampaignMutex.Lock()
	defer fake.deleteCampaignMutex.Unlock()
	fake.DeleteCampaignStub = nil
	fake.deleteCampaignReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) DeleteCampaignReturnsOnCall(i int, result1 bool, result2 error) {
	fake.deleteCampaignMutex.Lock()
	defer fake.deleteCampaignMutex.Unlock()
	fake.DeleteCampaignStub = nil
	if fake.deleteCampaignReturnsOnCall == nil {
		fake.deleteCampaignReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.deleteCampaignReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) DeleteList(arg1 context.Context, arg2 string) (bool, error) {
	fake.deleteListMutex.Lock()
	ret, specificReturn := fake.deleteListReturnsOnCall[len(fake.deleteListArgsForCall)]
	fake.deleteListArgsForCall = append(fake.deleteListArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteListStub
	fakeReturns := fake.deleteListReturns
	fake.recordInvocation("DeleteList", []interface{}{arg1, arg2})
	fake.deleteListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) DeleteListCallCount() int {
	fake.deleteListMutex.RLock()
	defer fake.deleteListMutex.RUnlock()
	return len(fake.deleteListArgsForCall)
}

func (fake *FakeMailchimp) DeleteListCalls(stub func(context.Context, string) (bool, error)) {
	fake.deleteListMutex.Lock()
	defer fake.deleteListMutex.Unlock()
	fake.DeleteListStub = stub
}

func (fake *FakeMailchimp) DeleteListArgsForCall(i int) (context.Context, string) {
	fake.deleteListMutex.RLock()
	defer fake.deleteListMutex.RUnlock()
	argsForCall := fake.deleteListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) DeleteListReturns(result1 bool, result2 error) {
	fake.deleteListMutex.Lock()
	defer fake.deleteListMutex.Unlock()
	fake.DeleteListStub = nil
	fake.deleteListReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) DeleteListReturnsOnCall(i int, result1 bool, result2 error) {
	fake.deleteListMutex.Lock()
	defer fake.deleteListMutex.Unlock()
	fake.DeleteListStub = nil
	if fake.deleteListReturnsOnCall == nil {
		fake.deleteListReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.deleteListReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) DeleteTemplate(arg1 context.Context, arg2 string) (bool, error) {
	fake.deleteTemplateMutex.Lock()
	ret, specificReturn := fake.deleteTemplateReturnsOnCall[len(fake.deleteTemplateArgsForCall)]
	fake.deleteTemplateArgsForCall = append(fake.deleteTemplateArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteTemplateStub
	fakeReturns := fake.deleteTemplateReturns
	fake.recordInvocation("DeleteTemplate", []interface{}{arg1, arg2})
	fake.deleteTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) DeleteTemplateCallCount() int {
	fake.deleteTemplateMutex.RLock()
	defer fake.deleteTemplateMutex.RUnlock()
	return len(fake.deleteTemplateArgsForCall)
}

func (fake *FakeMailchimp) DeleteTemplateCalls(stub func(context.Context, string) (bool, error)) {
	fake.deleteTemplateMutex.Lock()
	defer fake.deleteTemplateMutex.Unlock()
	fake.DeleteTemplateStub = stub
}

func (fake *FakeMailchimp) DeleteTemplateArgsForCall(i int) (context.Context, string) {
	fake.deleteTemplateMutex.RLock()
	defer fake.deleteTemplateMutex.RUnlock()
	argsForCall := fake.deleteTemplateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) DeleteTemplateReturns(result1 bool, result2 error) {
	fake.deleteTemplateMutex.Lock()
	defer fake.deleteTemplateMutex.Unlock()
	fake.DeleteTemplateStub = nil
	fake.deleteTemplateReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) DeleteTemplateReturnsOnCall(i int, result1 bool, result2 error) {
	fake.deleteTemplateMutex.Lock()
	defer fake.deleteTemplateMutex.Unlock()
	fake.DeleteTemplateStub = nil
	if fake.deleteTemplateReturnsOnCall == nil {
		fake.deleteTemplateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.deleteTemplateReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetBatchOperation(arg1 context.Context, arg2 string, arg3 *gochimp3.BasicQueryParams) (*gochimp3.BatchOperationResponse, error) {
	fake.getBatchOperationMutex.Lock()
	ret, specificReturn := fake.getBatchOperationReturnsOnCall[len(fake.getBatchOperationArgsForCall)]
	fake.getBatchOperationArgsForCall = append(fake.getBatchOperationArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}{arg1, arg2, arg3})
	stub := fake.GetBatchOperationStub
	fakeReturns := fake.getBatchOperationReturns
	fake.recordInvocation("GetBatchOperation", []interface{}{arg1, arg2, arg3})
	fake.getBatchOperationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetBatchOperationCallCount() int {
	fake.getBatchOperationMutex.RLock()
	defer fake.getBatchOperationMutex.RUnlock()
	return len(fake.getBatchOperationArgsForCall)
}

func (fake *FakeMailchimp) GetBatchOperationCalls(stub func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.BatchOperationResponse, error)) {
	fake.getBatchOperationMutex.Lock()
	defer fake.getBatchOperationMutex.Unlock()
	fake.GetBatchOperationStub = stub
}

func (fake *FakeMailchimp) GetBatchOperationArgsForCall(i int) (context.Context, string, *gochimp3.BasicQueryParams) {
	fake.getBatchOperationMutex.RLock()
	defer fake.getBatchOperationMutex.RUnlock()
	argsForCall := fake.getBatchOperationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) GetBatchOperationReturns(result1 *gochimp3.BatchOperationResponse, result2 error) {
	fake.getBatchOperationMutex.Lock()
	defer fake.getBatchOperationMutex.Unlock()
	fake.GetBatchOperationStub = nil
	fake.getBatchOperationReturns = struct {
		result1 *gochimp3.BatchOperationResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetBatchOperationReturnsOnCall(i int, result1 *gochimp3.BatchOperationResponse, result2 error) {
	fake.getBatchOperationMutex.Lock()
	defer fake.getBatchOperationMutex.Unlock()
	fake.GetBatchOperationStub = nil
	if fake.getBatchOperationReturnsOnCall == nil {
		fake.getBatchOperationReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.BatchOperationResponse
			result2 error
		})
	}
	fake.getBatchOperationReturnsOnCall[i] = struct {
		result1 *gochimp3.BatchOperationResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetBatchOperations(arg1 context.Context, arg2 *gochimp3.ListQueryParams) (*gochimp3.ListOfBatchOperations, error) {
	fake.getBatchOperationsMutex.Lock()
	ret, specificReturn := fake.getBatchOperationsReturnsOnCall[len(fake.getBatchOperationsArgsForCall)]
	fake.getBatchOperationsArgsForCall = append(fake.getBatchOperationsArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.ListQueryParams
	}{arg1, arg2})
	stub := fake.GetBatchOperationsStub
	fakeReturns := fake.getBatchOperationsReturns
	fake.recordInvocation("GetBatchOperations", []interface{}{arg1, arg2})
	fake.getBatchOperationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetBatchOperationsCallCount() int {
	fake.getBatchOperationsMutex.RLock()
	defer fake.getBatchOperationsMutex.RUnlock()
	return len(fake.getBatchOperationsArgsForCall)
}

func (fake *FakeMailchimp) GetBatchOperationsCalls(stub func(context.Context, *gochimp3.ListQueryParams) (*gochimp3.ListOfBatchOperations, error)) {
	fake.getBatchOperationsMutex.Lock()
	defer fake.getBatchOperationsMutex.Unlock()
	fake.GetBatchOperationsStub = stub
}

func (fake *FakeMailchimp) GetBatchOperationsArgsForCall(i int) (context.Context, *gochimp3.ListQueryParams) {
	fake.getBatchOperationsMutex.RLock()
	defer fake.getBatchOperationsMutex.RUnlock()
	argsForCall := fake.getBatchOperationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) GetBatchOperationsReturns(result1 *gochimp3.ListOfBatchOperations, result2 error) {
	fake.getBatchOperationsMutex.Lock()
	defer fake.getBatchOperationsMutex.Unlock()
	fake.GetBatchOperationsStub = nil
	fake.getBatchOperationsReturns = struct {
		result1 *gochimp3.ListOfBatchOperations
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetBatchOperationsReturnsOnCall(i int, result1 *gochimp3.ListOfBatchOperations, result2 error) {
	fake.getBatchOperationsMutex.Lock()
	defer fake.getBatchOperationsMutex.Unlock()
	fake.GetBatchOperationsStub = nil
	if fake.getBatchOperationsReturnsOnCall == nil {
		fake.getBatchOperationsReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListOfBatchOperations
			result2 error
		})
	}
	fake.getBatchOperationsReturnsOnCall[i] = struct {
		result1 *gochimp3.ListOfBatchOperations
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetCampaign(arg1 context.Context, arg2 string, arg3 *gochimp3.BasicQueryParams) (*gochimp3.CampaignResponse, error) {
	fake.getCampaignMutex.Lock()
	ret, specificReturn := fake.getCampaignReturnsOnCall[len(fake.getCampaignArgsForCall)]
	fake.getCampaignArgsForCall = append(fake.getCampaignArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}{arg1, arg2, arg3})
	stub := fake.GetCampaignStub
	fakeReturns := fake.getCampaignReturns
	fake.recordInvocation("GetCampaign", []interface{}{arg1, arg2, arg3})
	fake.getCampaignMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetCampaignCallCount() int {
	fake.getCampaignMutex.RLock()
	defer fake.getCampaignMutex.RUnlock()
	return len(fake.getCampaignArgsForCall)
}

func (fake *FakeMailchimp) GetCampaignCalls(stub func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.CampaignResponse, error)) {
	fake.getCampaignMutex.Lock()
	defer fake.getCampaignMutex.Unlock()
	fake.GetCampaignStub = stub
}

func (fake *FakeMailchimp) GetCampaignArgsForCall(i int) (context.Context, string, *gochimp3.BasicQueryParams) {
	fake.getCampaignMutex.RLock()
	defer fake.getCampaignMutex.RUnlock()
	argsForCall := fake.getCampaignArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) GetCampaignReturns(result1 *gochimp3.CampaignResponse, result2 error) {
	fake.getCampaignMutex.Lock()
	defer fake.getCampaignMutex.Unlock()
	fake.GetCampaignStub = nil
	fake.getCampaignReturns = struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetCampaignReturnsOnCall(i int, result1 *gochimp3.CampaignResponse, result2 error) {
	fake.getCampaignMutex.Lock()
	defer fake.getCampaignMutex.Unlock()
	fake.GetCampaignStub = nil
	if fake.getCampaignReturnsOnCall == nil {
		fake.getCampaignReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.CampaignResponse
			result2 error
		})
	}
	fake.getCampaignReturnsOnCall[i] = struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetCampaignContent(arg1 context.Context, arg2 string, arg3 *gochimp3.BasicQueryParams) (*gochimp3.CampaignContentResponse, error) {
	fake.getCampaignContentMutex.Lock()
	ret, specificReturn := fake.getCampaignContentReturnsOnCall[len(fake.getCampaignContentArgsForCall)]
	fake.getCampaignContentArgsForCall = append(fake.getCampaignContentArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}{arg1, arg2, arg3})
	stub := fake.GetCampaignContentStub
	fakeReturns := fake.getCampaignContentReturns
	fake.recordInvocation("GetCampaignContent", []interface{}{arg1, arg2, arg3})
	fake.getCampaignContentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetCampaignContentCallCount() int {
	fake.getCampaignContentMutex.RLock()
	defer fake.getCampaignContentMutex.RUnlock()
	return len(fake.getCampaignContentArgsForCall)
}

func (fake *FakeMailchimp) GetCampaignContentCalls(stub func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.CampaignContentResponse, error)) {
	fake.getCampaignContentMutex.Lock()
	defer fake.getCampaignContentMutex.Unlock()
	fake.GetCampaignContentStub = stub
}

func (fake *FakeMailchimp) GetCampaignContentArgsForCall(i int) (context.Context, string, *gochimp3.BasicQueryParams) {
	fake.getCampaignContentMutex.RLock()
	defer fake.getCampaignContentMutex.RUnlock()
	argsForCall := fake.getCampaignContentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) GetCampaignContentReturns(result1 *gochimp3.CampaignContentResponse, result2 error) {
	fake.getCampaignContentMutex.Lock()
	defer fake.getCampaignContentMutex.Unlock()
	fake.GetCampaignContentStub = nil
	fake.getCampaignContentReturns = struct {
		result1 *gochimp3.CampaignContentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetCampaignContentReturnsOnCall(i int, result1 *gochimp3.CampaignContentResponse, result2 error) {
	fake.getCampaignContentMutex.Lock()
	defer fake.getCampaignContentMutex.Unlock()
	fake.GetCampaignContentStub = nil
	if fake.getCampaignContentReturnsOnCall == nil {
		fake.getCampaignContentReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.CampaignContentResponse
			result2 error
		})
	}
	fake.getCampaignContentReturnsOnCall[i] = struct {
		result1 *gochimp3.CampaignContentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetCampaignFolders(arg1 context.Context, arg2 *gochimp3.CampaignFolderQueryParams) (*gochimp3.ListOfCampaignFolders, error) {
	fake.getCampaignFoldersMutex.Lock()
	ret, specificReturn := fake.getCampaignFoldersReturnsOnCall[len(fake.getCampaignFoldersArgsForCall)]
	fake.getCampaignFoldersArgsForCall = append(fake.getCampaignFoldersArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.CampaignFolderQueryParams
	}{arg1, arg2})
	stub := fake.GetCampaignFoldersStub
	fakeReturns := fake.getCampaignFoldersReturns
	fake.recordInvocation("GetCampaignFolders", []interface{}{arg1, arg2})
	fake.getCampaignFoldersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetCampaignFoldersCallCount() int {
	fake.getCampaignFoldersMutex.RLock()
	defer fake.getCampaignFoldersMutex.RUnlock()
	return len(fake.getCampaignFoldersArgsForCall)
}

func (fake *FakeMailchimp) GetCampaignFoldersCalls(stub func(context.Context, *gochimp3.CampaignFolderQueryParams) (*gochimp3.ListOfCampaignFolders, error)) {
	fake.getCampaignFoldersMutex.Lock()
	defer fake.getCampaignFoldersMutex.Unlock()
	fake.GetCampaignFoldersStub = stub
}

func (fake *FakeMailchimp) GetCampaignFoldersArgsForCall(i int) (context.Context, *gochimp3.CampaignFolderQueryParams) {
	fake.getCampaignFoldersMutex.RLock()
	defer fake.getCampaignFoldersMutex.RUnlock()
	argsForCall := fake.getCampaignFoldersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) GetCampaignFoldersReturns(result1 *gochimp3.ListOfCampaignFolders, result2 error) {
	fake.getCampaignFoldersMutex.Lock()
	defer fake.getCampaignFoldersMutex.Unlock()
	fake.GetCampaignFoldersStub = nil
	fake.getCampaignFoldersReturns = struct {
		result1 *gochimp3.ListOfCampaignFolders
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetCampaignFoldersReturnsOnCall(i int, result1 *gochimp3.ListOfCampaignFolders, result2 error) {
	fake.getCampaignFoldersMutex.Lock()
	defer fake.getCampaignFoldersMutex.Unlock()
	fake.GetCampaignFoldersStub = nil
	if fake.getCampaignFoldersReturnsOnCall == nil {
		fake.getCampaignFoldersReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListOfCampaignFolders
			result2 error
		})
	}
	fake.getCampaignFoldersReturnsOnCall[i] = struct {
		result1 *gochimp3.ListOfCampaignFolders
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetCampaigns(arg1 context.Context, arg2 *gochimp3.CampaignQueryParams) (*gochimp3.ListOfCampaigns, error) {
	fake.getCampaignsMutex.Lock()
	ret, specificReturn := fake.getCampaignsReturnsOnCall[len(fake.getCampaignsArgsForCall)]
	fake.getCampaignsArgsForCall = append(fake.getCampaignsArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.CampaignQueryParams
	}{arg1, arg2})
	stub := fake.GetCampaignsStub
	fakeReturns := fake.getCampaignsReturns
	fake.recordInvocation("GetCampaigns", []interface{}{arg1, arg2})
	fake.getCampaignsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetCampaignsCallCount() int {
	fake.getCampaignsMutex.RLock()
	defer fake.getCampaignsMutex.RUnlock()
	return len(fake.getCampaignsArgsForCall)
}

func (fake *FakeMailchimp) GetCampaignsCalls(stub func(context.Context, *gochimp3.CampaignQueryParams) (*gochimp3.ListOfCampaigns, error)) {
	fake.getCampaignsMutex.Lock()
	defer fake.getCampaignsMutex.Unlock()
	fake.GetCampaignsStub = stub
}

func (fake *FakeMailchimp) GetCampaignsArgsForCall(i int) (context.Context, *gochimp3.CampaignQueryParams) {
	fake.getCampaignsMutex.RLock()
	defer fake.getCampaignsMutex.RUnlock()
	argsForCall := fake.getCampaignsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) GetCampaignsReturns(result1 *gochimp3.ListOfCampaigns, result2 error) {
	fake.getCampaignsMutex.Lock()
	defer fake.getCampaignsMutex.Unlock()
	fake.GetCampaignsStub = nil
	fake.getCampaignsReturns = struct {
		result1 *gochimp3.ListOfCampaigns
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetCampaignsReturnsOnCall(i int, result1 *gochimp3.ListOfCampaigns, result2 error) {
	fake.getCampaignsMutex.Lock()
	defer fake.getCampaignsMutex.Unlock()
	fake.GetCampaignsStub = nil
	if fake.getCampaignsReturnsOnCall == nil {
		fake.getCampaignsReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListOfCampaigns
			result2 error
		})
	}
	fake.getCampaignsReturnsOnCall[i] = struct {
		result1 *gochimp3.ListOfCampaigns
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetList(arg1 context.Context, arg2 string, arg3 *gochimp3.BasicQueryParams) (*gochimp3.ListResponse, error) {
	fake.getListMutex.Lock()
	ret, specificReturn := fake.getListReturnsOnCall[len(fake.getListArgsForCall)]
	fake.getListArgsForCall = append(fake.getListArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}{arg1, arg2, arg3})
	stub := fake.GetListStub
	fakeReturns := fake.getListReturns
	fake.recordInvocation("GetList", []interface{}{arg1, arg2, arg3})
	fake.getListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetListCallCount() int {
	fake.getListMutex.RLock()
	defer fake.getListMutex.RUnlock()
	return len(fake.getListArgsForCall)
}

func (fake *FakeMailchimp) GetListCalls(stub func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.ListResponse, error)) {
	fake.getListMutex.Lock()
	defer fake.getListMutex.Unlock()
	fake.GetListStub = stub
}

func (fake *FakeMailchimp) GetListArgsForCall(i int) (context.Context, string, *gochimp3.BasicQueryParams) {
	fake.getListMutex.RLock()
	defer fake.getListMutex.RUnlock()
	argsForCall := fake.getListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) GetListReturns(result1 *gochimp3.ListResponse, result2 error) {
	fake.getListMutex.Lock()
	defer fake.getListMutex.Unlock()
	fake.GetListStub = nil
	fake.getListReturns = struct {
		result1 *gochimp3.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetListReturnsOnCall(i int, result1 *gochimp3.ListResponse, result2 error) {
	fake.getListMutex.Lock()
	defer fake.getListMutex.Unlock()
	fake.GetListStub = nil
	if fake.getListReturnsOnCall == nil {
		fake.getListReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListResponse
			result2 error
		})
	}
	fake.getListReturnsOnCall[i] = struct {
		result1 *gochimp3.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetLists(arg1 context.Context, arg2 *gochimp3.ListQueryParams) (*gochimp3.ListOfLists, error) {
	fake.getListsMutex.Lock()
	ret, specificReturn := fake.getListsReturnsOnCall[len(fake.getListsArgsForCall)]
	fake.getListsArgsForCall = append(fake.getListsArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.ListQueryParams
	}{arg1, arg2})
	stub := fake.GetListsStub
	fakeReturns := fake.getListsReturns
	fake.recordInvocation("GetLists", []interface{}{arg1, arg2})
	fake.getListsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetListsCallCount() int {
	fake.getListsMutex.RLock()
	defer fake.getListsMutex.RUnlock()
	return len(fake.getListsArgsForCall)
}

func (fake *FakeMailchimp) GetListsCalls(stub func(context.Context, *gochimp3.ListQueryParams) (*gochimp3.ListOfLists, error)) {
	fake.getListsMutex.Lock()
	defer fake.getListsMutex.Unlock()
	fake.GetListsStub = stub
}

func (fake *FakeMailchimp) GetListsArgsForCall(i int) (context.Context, *gochimp3.ListQueryParams) {
	fake.getListsMutex.RLock()
	defer fake.getListsMutex.RUnlock()
	argsForCall := fake.getListsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) GetListsReturns(result1 *gochimp3.ListOfLists, result2 error) {
	fake.getListsMutex.Lock()
	defer fake.getListsMutex.Unlock()
	fake.GetListsStub = nil
	fake.getListsReturns = struct {
		result1 *gochimp3.ListOfLists
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetListsReturnsOnCall(i int, result1 *gochimp3.ListOfLists, result2 error) {
	fake.getListsMutex.Lock()
	defer fake.getListsMutex.Unlock()
	fake.GetListsStub = nil
	if fake.getListsReturnsOnCall == nil {
		fake.getListsReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListOfLists
			result2 error
		})
	}
	fake.getListsReturnsOnCall[i] = struct {
		result1 *gochimp3.ListOfLists
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetRoot(arg1 context.Context, arg2 *gochimp3.BasicQueryParams) (*gochimp3.RootResponse, error) {
	fake.getRootMutex.Lock()
	ret, specificReturn := fake.getRootReturnsOnCall[len(fake.getRootArgsForCall)]
	fake.getRootArgsForCall = append(fake.getRootArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.BasicQueryParams
	}{arg1, arg2})
	stub := fake.GetRootStub
	fakeReturns := fake.getRootReturns
	fake.recordInvocation("GetRoot", []interface{}{arg1, arg2})
	fake.getRootMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetRootCallCount() int {
	fake.getRootMutex.RLock()
	defer fake.getRootMutex.RUnlock()
	return len(fake.getRootArgsForCall)
}

func (fake *FakeMailchimp) GetRootCalls(stub func(context.Context, *gochimp3.BasicQueryParams) (*gochimp3.RootResponse, error)) {
	fake.getRootMutex.Lock()
	defer fake.getRootMutex.Unlock()
	fake.GetRootStub = stub
}

func (fake *FakeMailchimp) GetRootArgsForCall(i int) (context.Context, *gochimp3.BasicQueryParams) {
	fake.getRootMutex.RLock()
	defer fake.getRootMutex.RUnlock()
	argsForCall := fake.getRootArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) GetRootReturns(result1 *gochimp3.RootResponse, result2 error) {
	fake.getRootMutex.Lock()
	defer fake.getRootMutex.Unlock()
	fake.GetRootStub = nil
	fake.getRootReturns = struct {
		result1 *gochimp3.RootResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetRootReturnsOnCall(i int, result1 *gochimp3.RootResponse, result2 error) {
	fake.getRootMutex.Lock()
	defer fake.getRootMutex.Unlock()
	fake.GetRootStub = nil
	if fake.getRootReturnsOnCall == nil {
		fake.getRootReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.RootResponse
			result2 error
		})
	}
	fake.getRootReturnsOnCall[i] = struct {
		result1 *gochimp3.RootResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetTemplate(arg1 context.Context, arg2 string, arg3 *gochimp3.BasicQueryParams) (*gochimp3.TemplateResponse, error) {
	fake.getTemplateMutex.Lock()
	ret, specificReturn := fake.getTemplateReturnsOnCall[len(fake.getTemplateArgsForCall)]
	fake.getTemplateArgsForCall = append(fake.getTemplateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}{arg1, arg2, arg3})
	stub := fake.GetTemplateStub
	fakeReturns := fake.getTemplateReturns
	fake.recordInvocation("GetTemplate", []interface{}{arg1, arg2, arg3})
	fake.getTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetTemplateCallCount() int {
	fake.getTemplateMutex.RLock()
	defer fake.getTemplateMutex.RUnlock()
	return len(fake.getTemplateArgsForCall)
}

func (fake *FakeMailchimp) GetTemplateCalls(stub func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.TemplateResponse, error)) {
	fake.getTemplateMutex.Lock()
	defer fake.getTemplateMutex.Unlock()
	fake.GetTemplateStub = stub
}

func (fake *FakeMailchimp) GetTemplateArgsForCall(i int) (context.Context, string, *gochimp3.BasicQueryParams) {
	fake.getTemplateMutex.RLock()
	defer fake.getTemplateMutex.RUnlock()
	argsForCall := fake.getTemplateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) GetTemplateReturns(result1 *gochimp3.TemplateResponse, result2 error) {
	fake.getTemplateMutex.Lock()
	defer fake.getTemplateMutex.Unlock()
	fake.GetTemplateStub = nil
	fake.getTemplateReturns = struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetTemplateReturnsOnCall(i int, result1 *gochimp3.TemplateResponse, result2 error) {
	fake.getTemplateMutex.Lock()
	defer fake.getTemplateMutex.Unlock()
	fake.GetTemplateStub = nil
	if fake.getTemplateReturnsOnCall == nil {
		fake.getTemplateReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.TemplateResponse
			result2 error
		})
	}
	fake.getTemplateReturnsOnCall[i] = struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetTemplateDefaultContent(arg1 context.Context, arg2 string, arg3 *gochimp3.BasicQueryParams) (*gochimp3.TemplateDefaultContentResponse, error) {
	fake.getTemplateDefaultContentMutex.Lock()
	ret, specificReturn := fake.getTemplateDefaultContentReturnsOnCall[len(fake.getTemplateDefaultContentArgsForCall)]
	fake.getTemplateDefaultContentArgsForCall = append(fake.getTemplateDefaultContentArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.BasicQueryParams
	}{arg1, arg2, arg3})
	stub := fake.GetTemplateDefaultContentStub
	fakeReturns := fake.getTemplateDefaultContentReturns
	fake.recordInvocation("GetTemplateDefaultContent", []interface{}{arg1, arg2, arg3})
	fake.getTemplateDefaultContentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetTemplateDefaultContentCallCount() int {
	fake.getTemplateDefaultContentMutex.RLock()
	defer fake.getTemplateDefaultContentMutex.RUnlock()
	return len(fake.getTemplateDefaultContentArgsForCall)
}

func (fake *FakeMailchimp) GetTemplateDefaultContentCalls(stub func(context.Context, string, *gochimp3.BasicQueryParams) (*gochimp3.TemplateDefaultContentResponse, error)) {
	fake.getTemplateDefaultContentMutex.Lock()
	defer fake.getTemplateDefaultContentMutex.Unlock()
	fake.GetTemplateDefaultContentStub = stub
}

func (fake *FakeMailchimp) GetTemplateDefaultContentArgsForCall(i int) (context.Context, string, *gochimp3.BasicQueryParams) {
	fake.getTemplateDefaultContentMutex.RLock()
	defer fake.getTemplateDefaultContentMutex.RUnlock()
	argsForCall := fake.getTemplateDefaultContentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) GetTemplateDefaultContentReturns(result1 *gochimp3.TemplateDefaultContentResponse, result2 error) {
	fake.getTemplateDefaultContentMutex.Lock()
	defer fake.getTemplateDefaultContentMutex.Unlock()
	fake.GetTemplateDefaultContentStub = nil
	fake.getTemplateDefaultContentReturns = struct {
		result1 *gochimp3.TemplateDefaultContentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetTemplateDefaultContentReturnsOnCall(i int, result1 *gochimp3.TemplateDefaultContentResponse, result2 error) {
	fake.getTemplateDefaultContentMutex.Lock()
	defer fake.getTemplateDefaultContentMutex.Unlock()
	fake.GetTemplateDefaultContentStub = nil
	if fake.getTemplateDefaultContentReturnsOnCall == nil {
		fake.getTemplateDefaultContentReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.TemplateDefaultContentResponse
			result2 error
		})
	}
	fake.getTemplateDefaultContentReturnsOnCall[i] = struct {
		result1 *gochimp3.TemplateDefaultContentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetTemplateFolders(arg1 context.Context, arg2 *gochimp3.TemplateFolderQueryParams) (*gochimp3.ListOfTemplateFolders, error) {
	fake.getTemplateFoldersMutex.Lock()
	ret, specificReturn := fake.getTemplateFoldersReturnsOnCall[len(fake.getTemplateFoldersArgsForCall)]
	fake.getTemplateFoldersArgsForCall = append(fake.getTemplateFoldersArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.TemplateFolderQueryParams
	}{arg1, arg2})
	stub := fake.GetTemplateFoldersStub
	fakeReturns := fake.getTemplateFoldersReturns
	fake.recordInvocation("GetTemplateFolders", []interface{}{arg1, arg2})
	fake.getTemplateFoldersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetTemplateFoldersCallCount() int {
	fake.getTemplateFoldersMutex.RLock()
	defer fake.getTemplateFoldersMutex.RUnlock()
	return len(fake.getTemplateFoldersArgsForCall)
}

func (fake *FakeMailchimp) GetTemplateFoldersCalls(stub func(context.Context, *gochimp3.TemplateFolderQueryParams) (*gochimp3.ListOfTemplateFolders, error)) {
	fake.getTemplateFoldersMutex.Lock()
	defer fake.getTemplateFoldersMutex.Unlock()
	fake.GetTemplateFoldersStub = stub
}

func (fake *FakeMailchimp) GetTemplateFoldersArgsForCall(i int) (context.Context, *gochimp3.TemplateFolderQueryParams) {
	fake.getTemplateFoldersMutex.RLock()
	defer fake.getTemplateFoldersMutex.RUnlock()
	argsForCall := fake.getTemplateFoldersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) GetTemplateFoldersReturns(result1 *gochimp3.ListOfTemplateFolders, result2 error) {
	fake.getTemplateFoldersMutex.Lock()
	defer fake.getTemplateFoldersMutex.Unlock()
	fake.GetTemplateFoldersStub = nil
	fake.getTemplateFoldersReturns = struct {
		result1 *gochimp3.ListOfTemplateFolders
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetTemplateFoldersReturnsOnCall(i int, result1 *gochimp3.ListOfTemplateFolders, result2 error) {
	fake.getTemplateFoldersMutex.Lock()
	defer fake.getTemplateFoldersMutex.Unlock()
	fake.GetTemplateFoldersStub = nil
	if fake.getTemplateFoldersReturnsOnCall == nil {
		fake.getTemplateFoldersReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListOfTemplateFolders
			result2 error
		})
	}
	fake.getTemplateFoldersReturnsOnCall[i] = struct {
		result1 *gochimp3.ListOfTemplateFolders
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetTemplates(arg1 context.Context, arg2 *gochimp3.TemplateQueryParams) (*gochimp3.ListOfTemplates, error) {
	fake.getTemplatesMutex.Lock()
	ret, specificReturn := fake.getTemplatesReturnsOnCall[len(fake.getTemplatesArgsForCall)]
	fake.getTemplatesArgsForCall = append(fake.getTemplatesArgsForCall, struct {
		arg1 context.Context
		arg2 *gochimp3.TemplateQueryParams
	}{arg1, arg2})
	stub := fake.GetTemplatesStub
	fakeReturns := fake.getTemplatesReturns
	fake.recordInvocation("GetTemplates", []interface{}{arg1, arg2})
	fake.getTemplatesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) GetTemplatesCallCount() int {
	fake.getTemplatesMutex.RLock()
	defer fake.getTemplatesMutex.RUnlock()
	return len(fake.getTemplatesArgsForCall)
}

func (fake *FakeMailchimp) GetTemplatesCalls(stub func(context.Context, *gochimp3.TemplateQueryParams) (*gochimp3.ListOfTemplates, error)) {
	fake.getTemplatesMutex.Lock()
	defer fake.getTemplatesMutex.Unlock()
	fake.GetTemplatesStub = stub
}

func (fake *FakeMailchimp) GetTemplatesArgsForCall(i int) (context.Context, *gochimp3.TemplateQueryParams) {
	fake.getTemplatesMutex.RLock()
	defer fake.getTemplatesMutex.RUnlock()
	argsForCall := fake.getTemplatesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) GetTemplatesReturns(result1 *gochimp3.ListOfTemplates, result2 error) {
	fake.getTemplatesMutex.Lock()
	defer fake.getTemplatesMutex.Unlock()
	fake.GetTemplatesStub = nil
	fake.getTemplatesReturns = struct {
		result1 *gochimp3.ListOfTemplates
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) GetTemplatesReturnsOnCall(i int, result1 *gochimp3.ListOfTemplates, result2 error) {
	fake.getTemplatesMutex.Lock()
	defer fake.getTemplatesMutex.Unlock()
	fake.GetTemplatesStub = nil
	if fake.getTemplatesReturnsOnCall == nil {
		fake.getTemplatesReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListOfTemplates
			result2 error
		})
	}
	fake.getTemplatesReturnsOnCall[i] = struct {
		result1 *gochimp3.ListOfTemplates
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) MemberForApiCalls(arg1 string, arg2 string) *gochimp3.Member {
	fake.memberForApiCallsMutex.Lock()
	ret, specificReturn := fake.memberForApiCallsReturnsOnCall[len(fake.memberForApiCallsArgsForCall)]
	fake.memberForApiCallsArgsForCall = append(fake.memberForApiCallsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.MemberForApiCallsStub
	fakeReturns := fake.memberForApiCallsReturns
	fake.recordInvocation("MemberForApiCalls", []interface{}{arg1, arg2})
	fake.memberForApiCallsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMailchimp) MemberForApiCallsCallCount() int {
	fake.memberForApiCallsMutex.RLock()
	defer fake.memberForApiCallsMutex.RUnlock()
	return len(fake.memberForApiCallsArgsForCall)
}

func (fake *FakeMailchimp) MemberForApiCallsCalls(stub func(string, string) *gochimp3.Member) {
	fake.memberForApiCallsMutex.Lock()
	defer fake.memberForApiCallsMutex.Unlock()
	fake.MemberForApiCallsStub = stub
}

func (fake *FakeMailchimp) MemberForApiCallsArgsForCall(i int) (string, string) {
	fake.memberForApiCallsMutex.RLock()
	defer fake.memberForApiCallsMutex.RUnlock()
	argsForCall := fake.memberForApiCallsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailchimp) MemberForApiCallsReturns(result1 *gochimp3.Member) {
	fake.memberForApiCallsMutex.Lock()
	defer fake.memberForApiCallsMutex.Unlock()
	fake.MemberForApiCallsStub = nil
	fake.memberForApiCallsReturns = struct {
		result1 *gochimp3.Member
	}{result1}
}

func (fake *FakeMailchimp) MemberForApiCallsReturnsOnCall(i int, result1 *gochimp3.Member) {
	fake.memberForApiCallsMutex.Lock()
	defer fake.memberForApiCallsMutex.Unlock()
	fake.MemberForApiCallsStub = nil
	if fake.memberForApiCallsReturnsOnCall == nil {
		fake.memberForApiCallsReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.Member
		})
	}
	fake.memberForApiCallsReturnsOnCall[i] = struct {
		result1 *gochimp3.Member
	}{result1}
}

func (fake *FakeMailchimp) NewListResponse(arg1 string) *gochimp3.ListResponse {
	fake.newListResponseMutex.Lock()
	ret, specificReturn := fake.newListResponseReturnsOnCall[len(fake.newListResponseArgsForCall)]
	fake.newListResponseArgsForCall = append(fake.newListResponseArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.NewListResponseStub
	fakeReturns := fake.newListResponseReturns
	fake.recordInvocation("NewListResponse", []interface{}{arg1})
	fake.newListResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMailchimp) NewListResponseCallCount() int {
	fake.newListResponseMutex.RLock()
	defer fake.newListResponseMutex.RUnlock()
	return len(fake.newListResponseArgsForCall)
}

func (fake *FakeMailchimp) NewListResponseCalls(stub func(string) *gochimp3.ListResponse) {
	fake.newListResponseMutex.Lock()
	defer fake.newListResponseMutex.Unlock()
	fake.NewListResponseStub = stub
}

func (fake *FakeMailchimp) NewListResponseArgsForCall(i int) string {
	fake.newListResponseMutex.RLock()
	defer fake.newListResponseMutex.RUnlock()
	argsForCall := fake.newListResponseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMailchimp) NewListResponseReturns(result1 *gochimp3.ListResponse) {
	fake.newListResponseMutex.Lock()
	defer fake.newListResponseMutex.Unlock()
	fake.NewListResponseStub = nil
	fake.newListResponseReturns = struct {
		result1 *gochimp3.ListResponse
	}{result1}
}

func (fake *FakeMailchimp) NewListResponseReturnsOnCall(i int, result1 *gochimp3.ListResponse) {
	fake.newListResponseMutex.Lock()
	defer fake.newListResponseMutex.Unlock()
	fake.NewListResponseStub = nil
	if fake.newListResponseReturnsOnCall == nil {
		fake.newListResponseReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListResponse
		})
	}
	fake.newListResponseReturnsOnCall[i] = struct {
		result1 *gochimp3.ListResponse
	}{result1}
}

func (fake *FakeMailchimp) SendCampaign(arg1 context.Context, arg2 string, arg3 *gochimp3.SendCampaignRequest) (bool, error) {
	fake.sendCampaignMutex.Lock()
	ret, specificReturn := fake.sendCampaignReturnsOnCall[len(fake.sendCampaignArgsForCall)]
	fake.sendCampaignArgsForCall = append(fake.sendCampaignArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.SendCampaignRequest
	}{arg1, arg2, arg3})
	stub := fake.SendCampaignStub
	fakeReturns := fake.sendCampaignReturns
	fake.recordInvocation("SendCampaign", []interface{}{arg1, arg2, arg3})
	fake.sendCampaignMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) SendCampaignCallCount() int {
	fake.sendCampaignMutex.RLock()
	defer fake.sendCampaignMutex.RUnlock()
	return len(fake.sendCampaignArgsForCall)
}

func (fake *FakeMailchimp) SendCampaignCalls(stub func(context.Context, string, *gochimp3.SendCampaignRequest) (bool, error)) {
	fake.sendCampaignMutex.Lock()
	defer fake.sendCampaignMutex.Unlock()
	fake.SendCampaignStub = stub
}

func (fake *FakeMailchimp) SendCampaignArgsForCall(i int) (context.Context, string, *gochimp3.SendCampaignRequest) {
	fake.sendCampaignMutex.RLock()
	defer fake.sendCampaignMutex.RUnlock()
	argsForCall := fake.sendCampaignArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) SendCampaignReturns(result1 bool, result2 error) {
	fake.sendCampaignMutex.Lock()
	defer fake.sendCampaignMutex.Unlock()
	fake.SendCampaignStub = nil
	fake.sendCampaignReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) SendCampaignReturnsOnCall(i int, result1 bool, result2 error) {
	fake.sendCampaignMutex.Lock()
	defer fake.sendCampaignMutex.Unlock()
	fake.SendCampaignStub = nil
	if fake.sendCampaignReturnsOnCall == nil {
		fake.sendCampaignReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.sendCampaignReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) SendTestEmail(arg1 context.Context, arg2 string, arg3 *gochimp3.TestEmailRequest) (bool, error) {
	fake.sendTestEmailMutex.Lock()
	ret, specificReturn := fake.sendTestEmailReturnsOnCall[len(fake.sendTestEmailArgsForCall)]
	fake.sendTestEmailArgsForCall = append(fake.sendTestEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.TestEmailRequest
	}{arg1, arg2, arg3})
	stub := fake.SendTestEmailStub
	fakeReturns := fake.sendTestEmailReturns
	fake.recordInvocation("SendTestEmail", []interface{}{arg1, arg2, arg3})
	fake.sendTestEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) SendTestEmailCallCount() int {
	fake.sendTestEmailMutex.RLock()
	defer fake.sendTestEmailMutex.RUnlock()
	return len(fake.sendTestEmailArgsForCall)
}

func (fake *FakeMailchimp) SendTestEmailCalls(stub func(context.Context, string, *gochimp3.TestEmailRequest) (bool, error)) {
	fake.sendTestEmailMutex.Lock()
	defer fake.sendTestEmailMutex.Unlock()
	fake.SendTestEmailStub = stub
}

func (fake *FakeMailchimp) SendTestEmailArgsForCall(i int) (context.Context, string, *gochimp3.TestEmailRequest) {
	fake.sendTestEmailMutex.RLock()
	defer fake.sendTestEmailMutex.RUnlock()
	argsForCall := fake.sendTestEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) SendTestEmailReturns(result1 bool, result2 error) {
	fake.sendTestEmailMutex.Lock()
	defer fake.sendTestEmailMutex.Unlock()
	fake.SendTestEmailStub = nil
	fake.sendTestEmailReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) SendTestEmailReturnsOnCall(i int, result1 bool, result2 error) {
	fake.sendTestEmailMutex.Lock()
	defer fake.sendTestEmailMutex.Unlock()
	fake.SendTestEmailStub = nil
	if fake.sendTestEmailReturnsOnCall == nil {
		fake.sendTestEmailReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.sendTestEmailReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) UpdateCampaign(arg1 context.Context, arg2 string, arg3 *gochimp3.CampaignCreationRequest) (*gochimp3.CampaignResponse, error) {
	fake.updateCampaignMutex.Lock()
	ret, specificReturn := fake.updateCampaignReturnsOnCall[len(fake.updateCampaignArgsForCall)]
	fake.updateCampaignArgsForCall = append(fake.updateCampaignArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.CampaignCreationRequest
	}{arg1, arg2, arg3})
	stub := fake.UpdateCampaignStub
	fakeReturns := fake.updateCampaignReturns
	fake.recordInvocation("UpdateCampaign", []interface{}{arg1, arg2, arg3})
	fake.updateCampaignMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) UpdateCampaignCallCount() int {
	fake.updateCampaignMutex.RLock()
	defer fake.updateCampaignMutex.RUnlock()
	return len(fake.updateCampaignArgsForCall)
}

func (fake *FakeMailchimp) UpdateCampaignCalls(stub func(context.Context, string, *gochimp3.CampaignCreationRequest) (*gochimp3.CampaignResponse, error)) {
	fake.updateCampaignMutex.Lock()
	defer fake.updateCampaignMutex.Unlock()
	fake.UpdateCampaignStub = stub
}

func (fake *FakeMailchimp) UpdateCampaignArgsForCall(i int) (context.Context, string, *gochimp3.CampaignCreationRequest) {
	fake.updateCampaignMutex.RLock()
	defer fake.updateCampaignMutex.RUnlock()
	argsForCall := fake.updateCampaignArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) UpdateCampaignReturns(result1 *gochimp3.CampaignResponse, result2 error) {
	fake.updateCampaignMutex.Lock()
	defer fake.updateCampaignMutex.Unlock()
	fake.UpdateCampaignStub = nil
	fake.updateCampaignReturns = struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) UpdateCampaignReturnsOnCall(i int, result1 *gochimp3.CampaignResponse, result2 error) {
	fake.updateCampaignMutex.Lock()
	defer fake.updateCampaignMutex.Unlock()
	fake.UpdateCampaignStub = nil
	if fake.updateCampaignReturnsOnCall == nil {
		fake.updateCampaignReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.CampaignResponse
			result2 error
		})
	}
	fake.updateCampaignReturnsOnCall[i] = struct {
		result1 *gochimp3.CampaignResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) UpdateCampaignContent(arg1 context.Context, arg2 string, arg3 *gochimp3.CampaignContentUpdateRequest) (*gochimp3.CampaignContentResponse, error) {
	fake.updateCampaignContentMutex.Lock()
	ret, specificReturn := fake.updateCampaignContentReturnsOnCall[len(fake.updateCampaignContentArgsForCall)]
	fake.updateCampaignContentArgsForCall = append(fake.updateCampaignContentArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.CampaignContentUpdateRequest
	}{arg1, arg2, arg3})
	stub := fake.UpdateCampaignContentStub
	fakeReturns := fake.updateCampaignContentReturns
	fake.recordInvocation("UpdateCampaignContent", []interface{}{arg1, arg2, arg3})
	fake.updateCampaignContentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) UpdateCampaignContentCallCount() int {
	fake.updateCampaignContentMutex.RLock()
	defer fake.updateCampaignContentMutex.RUnlock()
	return len(fake.updateCampaignContentArgsForCall)
}

func (fake *FakeMailchimp) UpdateCampaignContentCalls(stub func(context.Context, string, *gochimp3.CampaignContentUpdateRequest) (*gochimp3.CampaignContentResponse, error)) {
	fake.updateCampaignContentMutex.Lock()
	defer fake.updateCampaignContentMutex.Unlock()
	fake.UpdateCampaignContentStub = stub
}

func (fake *FakeMailchimp) UpdateCampaignContentArgsForCall(i int) (context.Context, string, *gochimp3.CampaignContentUpdateRequest) {
	fake.updateCampaignContentMutex.RLock()
	defer fake.updateCampaignContentMutex.RUnlock()
	argsForCall := fake.updateCampaignContentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) UpdateCampaignContentReturns(result1 *gochimp3.CampaignContentResponse, result2 error) {
	fake.updateCampaignContentMutex.Lock()
	defer fake.updateCampaignContentMutex.Unlock()
	fake.UpdateCampaignContentStub = nil
	fake.updateCampaignContentReturns = struct {
		result1 *gochimp3.CampaignContentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) UpdateCampaignContentReturnsOnCall(i int, result1 *gochimp3.CampaignContentResponse, result2 error) {
	fake.updateCampaignContentMutex.Lock()
	defer fake.updateCampaignContentMutex.Unlock()
	fake.UpdateCampaignContentStub = nil
	if fake.updateCampaignContentReturnsOnCall == nil {
		fake.updateCampaignContentReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.CampaignContentResponse
			result2 error
		})
	}
	fake.updateCampaignContentReturnsOnCall[i] = struct {
		result1 *gochimp3.CampaignContentResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) UpdateList(arg1 context.Context, arg2 string, arg3 *gochimp3.ListCreationRequest) (*gochimp3.ListResponse, error) {
	fake.updateListMutex.Lock()
	ret, specificReturn := fake.updateListReturnsOnCall[len(fake.updateListArgsForCall)]
	fake.updateListArgsForCall = append(fake.updateListArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.ListCreationRequest
	}{arg1, arg2, arg3})
	stub := fake.UpdateListStub
	fakeReturns := fake.updateListReturns
	fake.recordInvocation("UpdateList", []interface{}{arg1, arg2, arg3})
	fake.updateListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) UpdateListCallCount() int {
	fake.updateListMutex.RLock()
	defer fake.updateListMutex.RUnlock()
	return len(fake.updateListArgsForCall)
}

func (fake *FakeMailchimp) UpdateListCalls(stub func(context.Context, string, *gochimp3.ListCreationRequest) (*gochimp3.ListResponse, error)) {
	fake.updateListMutex.Lock()
	defer fake.updateListMutex.Unlock()
	fake.UpdateListStub = stub
}

func (fake *FakeMailchimp) UpdateListArgsForCall(i int) (context.Context, string, *gochimp3.ListCreationRequest) {
	fake.updateListMutex.RLock()
	defer fake.updateListMutex.RUnlock()
	argsForCall := fake.updateListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) UpdateListReturns(result1 *gochimp3.ListResponse, result2 error) {
	fake.updateListMutex.Lock()
	defer fake.updateListMutex.Unlock()
	fake.UpdateListStub = nil
	fake.updateListReturns = struct {
		result1 *gochimp3.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) UpdateListReturnsOnCall(i int, result1 *gochimp3.ListResponse, result2 error) {
	fake.updateListMutex.Lock()
	defer fake.updateListMutex.Unlock()
	fake.UpdateListStub = nil
	if fake.updateListReturnsOnCall == nil {
		fake.updateListReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.ListResponse
			result2 error
		})
	}
	fake.updateListReturnsOnCall[i] = struct {
		result1 *gochimp3.ListResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) UpdateTemplate(arg1 context.Context, arg2 string, arg3 *gochimp3.TemplateCreationRequest) (*gochimp3.TemplateResponse, error) {
	fake.updateTemplateMutex.Lock()
	ret, specificReturn := fake.updateTemplateReturnsOnCall[len(fake.updateTemplateArgsForCall)]
	fake.updateTemplateArgsForCall = append(fake.updateTemplateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *gochimp3.TemplateCreationRequest
	}{arg1, arg2, arg3})
	stub := fake.UpdateTemplateStub
	fakeReturns := fake.updateTemplateReturns
	fake.recordInvocation("UpdateTemplate", []interface{}{arg1, arg2, arg3})
	fake.updateTemplateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) UpdateTemplateCallCount() int {
	fake.updateTemplateMutex.RLock()
	defer fake.updateTemplateMutex.RUnlock()
	return len(fake.updateTemplateArgsForCall)
}

func (fake *FakeMailchimp) UpdateTemplateCalls(stub func(context.Context, string, *gochimp3.TemplateCreationRequest) (*gochimp3.TemplateResponse, error)) {
	fake.updateTemplateMutex.Lock()
	defer fake.updateTemplateMutex.Unlock()
	fake.UpdateTemplateStub = stub
}

func (fake *FakeMailchimp) UpdateTemplateArgsForCall(i int) (context.Context, string, *gochimp3.TemplateCreationRequest) {
	fake.updateTemplateMutex.RLock()
	defer fake.updateTemplateMutex.RUnlock()
	argsForCall := fake.updateTemplateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) UpdateTemplateReturns(result1 *gochimp3.TemplateResponse, result2 error) {
	fake.updateTemplateMutex.Lock()
	defer fake.updateTemplateMutex.Unlock()
	fake.UpdateTemplateStub = nil
	fake.updateTemplateReturns = struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) UpdateTemplateReturnsOnCall(i int, result1 *gochimp3.TemplateResponse, result2 error) {
	fake.updateTemplateMutex.Lock()
	defer fake.updateTemplateMutex.Unlock()
	fake.UpdateTemplateStub = nil
	if fake.updateTemplateReturnsOnCall == nil {
		fake.updateTemplateReturnsOnCall = make(map[int]struct {
			result1 *gochimp3.TemplateResponse
			result2 error
		})
	}
	fake.updateTemplateReturnsOnCall[i] = struct {
		result1 *gochimp3.TemplateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) request(arg1 context.Context, arg2 string, arg3 string, arg4 gochimp3.QueryParams, arg5 interface{}, arg6 interface{}) error {
	fake.requestMutex.Lock()
	ret, specificReturn := fake.requestReturnsOnCall[len(fake.requestArgsForCall)]
	fake.requestArgsForCall = append(fake.requestArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 gochimp3.QueryParams
		arg5 interface{}
		arg6 interface{}
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.requestStub
	fakeReturns := fake.requestReturns
	fake.recordInvocation("request", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.requestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMailchimp) RequestCallCount() int {
	fake.requestMutex.RLock()
	defer fake.requestMutex.RUnlock()
	return len(fake.requestArgsForCall)
}

func (fake *FakeMailchimp) RequestCalls(stub func(context.Context, string, string, gochimp3.QueryParams, interface{}, interface{}) error) {
	fake.requestMutex.Lock()
	defer fake.requestMutex.Unlock()
	fake.requestStub = stub
}

func (fake *FakeMailchimp) RequestArgsForCall(i int) (context.Context, string, string, gochimp3.QueryParams, interface{}, interface{}) {
	fake.requestMutex.RLock()
	defer fake.requestMutex.RUnlock()
	argsForCall := fake.requestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeMailchimp) RequestReturns(result1 error) {
	fake.requestMutex.Lock()
	defer fake.requestMutex.Unlock()
	fake.requestStub = nil
	fake.requestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMailchimp) RequestReturnsOnCall(i int, result1 error) {
	fake.requestMutex.Lock()
	defer fake.requestMutex.Unlock()
	fake.requestStub = nil
	if fake.requestReturnsOnCall == nil {
		fake.requestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.requestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMailchimp) requestOk(arg1 context.Context, arg2 string, arg3 string) (bool, error) {
	fake.requestOkMutex.Lock()
	ret, specificReturn := fake.requestOkReturnsOnCall[len(fake.requestOkArgsForCall)]
	fake.requestOkArgsForCall = append(fake.requestOkArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.requestOkStub
	fakeReturns := fake.requestOkReturns
	fake.recordInvocation("requestOk", []interface{}{arg1, arg2, arg3})
	fake.requestOkMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMailchimp) RequestOkCallCount() int {
	fake.requestOkMutex.RLock()
	defer fake.requestOkMutex.RUnlock()
	return len(fake.requestOkArgsForCall)
}

func (fake *FakeMailchimp) RequestOkCalls(stub func(context.Context, string, string) (bool, error)) {
	fake.requestOkMutex.Lock()
	defer fake.requestOkMutex.Unlock()
	fake.requestOkStub = stub
}

func (fake *FakeMailchimp) RequestOkArgsForCall(i int) (context.Context, string, string) {
	fake.requestOkMutex.RLock()
	defer fake.requestOkMutex.RUnlock()
	argsForCall := fake.requestOkArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeMailchimp) RequestOkReturns(result1 bool, result2 error) {
	fake.requestOkMutex.Lock()
	defer fake.requestOkMutex.Unlock()
	fake.requestOkStub = nil
	fake.requestOkReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) RequestOkReturnsOnCall(i int, result1 bool, result2 error) {
	fake.requestOkMutex.Lock()
	defer fake.requestOkMutex.Unlock()
	fake.requestOkStub = nil
	if fake.requestOkReturnsOnCall == nil {
		fake.requestOkReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.requestOkReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeMailchimp) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createBatchOperationMutex.RLock()
	defer fake.createBatchOperationMutex.RUnlock()
	fake.createCampaignMutex.RLock()
	defer fake.createCampaignMutex.RUnlock()
	fake.createCampaignFolderMutex.RLock()
	defer fake.createCampaignFolderMutex.RUnlock()
	fake.createListMutex.RLock()
	defer fake.createListMutex.RUnlock()
	fake.createTemplateMutex.RLock()
	defer fake.createTemplateMutex.RUnlock()
	fake.createTemplateFolderMutex.RLock()
	defer fake.createTemplateFolderMutex.RUnlock()
	fake.deleteCampaignMutex.RLock()
	defer fake.deleteCampaignMutex.RUnlock()
	fake.deleteListMutex.RLock()
	defer fake.deleteListMutex.RUnlock()
	fake.deleteTemplateMutex.RLock()
	defer fake.deleteTemplateMutex.RUnlock()
	fake.getBatchOperationMutex.RLock()
	defer fake.getBatchOperationMutex.RUnlock()
	fake.getBatchOperationsMutex.RLock()
	defer fake.getBatchOperationsMutex.RUnlock()
	fake.getCampaignMutex.RLock()
	defer fake.getCampaignMutex.RUnlock()
	fake.getCampaignContentMutex.RLock()
	defer fake.getCampaignContentMutex.RUnlock()
	fake.getCampaignFoldersMutex.RLock()
	defer fake.getCampaignFoldersMutex.RUnlock()
	fake.getCampaignsMutex.RLock()
	defer fake.getCampaignsMutex.RUnlock()
	fake.getListMutex.RLock()
	defer fake.getListMutex.RUnlock()
	fake.getListsMutex.RLock()
	defer fake.getListsMutex.RUnlock()
	fake.getRootMutex.RLock()
	defer fake.getRootMutex.RUnlock()
	fake.getTemplateMutex.RLock()
	defer fake.getTemplateMutex.RUnlock()
	fake.getTemplateDefaultContentMutex.RLock()
	defer fake.getTemplateDefaultContentMutex.RUnlock()
	fake.getTemplateFoldersMutex.RLock()
	defer fake.getTemplateFoldersMutex.RUnlock()
	fake.getTemplatesMutex.RLock()
	defer fake.getTemplatesMutex.RUnlock()
	fake.memberForApiCallsMutex.RLock()
	defer fake.memberForApiCallsMutex.RUnlock()
	fake.newListResponseMutex.RLock()
	defer fake.newListResponseMutex.RUnlock()
	fake.sendCampaignMutex.RLock()
	defer fake.sendCampaignMutex.RUnlock()
	fake.sendTestEmailMutex.RLock()
	defer fake.sendTestEmailMutex.RUnlock()
	fake.updateCampaignMutex.RLock()
	defer fake.updateCampaignMutex.RUnlock()
	fake.updateCampaignContentMutex.RLock()
	defer fake.updateCampaignContentMutex.RUnlock()
	fake.updateListMutex.RLock()
	defer fake.updateListMutex.RUnlock()
	fake.updateTemplateMutex.RLock()
	defer fake.updateTemplateMutex.RUnlock()
	fake.requestMutex.RLock()
	defer fake.requestMutex.RUnlock()
	fake.requestOkMutex.RLock()
	defer fake.requestOkMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMailchimp) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gochimp3.Mailchimp = new(FakeMailchimp)
